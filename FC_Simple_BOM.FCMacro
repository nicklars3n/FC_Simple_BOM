import FreeCAD as App
import PySide2
import os
import json
import csv

def traverse_object(object):
    # Classify object
    if object.TypeId == "App::Part" and object.Type == "Assembly":
        children = [object.getSubObject(name, retType=1) for name in object.getSubObjects()]

        return {
            "type": "assembly",
            "label": object.Label,
            "children": [
                y for child in children if (y := traverse_object(child)) is not None
            ]
        }

    elif object.TypeId == "App::Part":
        return {
            "type": "part",
            "label": object.Label,
        }

    elif object.TypeId == "App::Link":
        return traverse_object(object.LinkedObject)

    elif object.TypeId == "Part::FeaturePython" and object.ArrayType == "Circular Array":
        obj = traverse_object(object.SourceObject)

        return [obj] * object.Count

def dissolve_lists(object):
    # take lists in child and break down
    if object["type"] == "assembly":
        
        newchildren = []
        # break objects out of lists
        for child in object["children"]:
            if isinstance(child, list):
                for subchild in child:
                    newchildren.append(subchild)
            else:
                newchildren.append(child)
            
        object["children"] = newchildren

        # next level
        for child in object["children"]:
            dissolve_lists(child)

def flatten(object, consolidated={}):
    # flatten the tree, removing assemblies, consolidating parts by label

    if object["type"] == "assembly":
        for child in object["children"]:
            flatten(child, consolidated)
    
    elif object["type"] == "part":
        if object["label"] in consolidated:
            consolidated[object["label"]]["quantity"] += 1
        else:
            consolidated[object["label"]] = {
                "quantity": 1
            }

    return consolidated

def listify(object):
    lst = []
    for label in object:
        object[label]["label"] = label
        lst.append(object[label])

    return lst

def save(root_assem):
    direct = os.path.dirname(App.ActiveDocument.FileName)
    SaveName, Filter = PySide2.QtWidgets.QFileDialog.getSaveFileName(None, "Export BOM", direct, "Javascript Object Notation (*.json);;Comma Delimited (*.csv)")
    
    print(f"Saving to: {SaveName} with filter {Filter}")

    if "*.json" in Filter:
        with open(SaveName, "w", encoding="utf-8") as file:
            json.dump(root_assem, file, indent=4)
    elif "*.csv" in Filter:
        with open(SaveName, "w", encoding="utf-8", newline="") as file:
            fieldnames = ["label", "quantity"]
            writer = csv.DictWriter(file, fieldnames=fieldnames)

            writer.writeheader()
            writer.writerows(root_assem)
            

if __name__=="__main__":
    doc = App.ActiveDocument

    print("---- BOM List ----")

    buffer = []

    for RootObject in doc.RootObjects:

        ## Find Root Assembly
        if RootObject.TypeId == "App::Part" and RootObject.Type == "Assembly":
            
            root_assem = traverse_object(RootObject)
            break

    
    dissolve_lists(root_assem)

    flat = flatten(root_assem)
    list = listify(flat)

    save(list)
    
    # save(root_assem)